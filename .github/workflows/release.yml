name: Version Management

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - run: |
          git fetch --tags
          NEW="v${{ inputs.version }}"
          git tag "$NEW"
          sed -E 's/__version__ = ".*"/__version__ = "'"${{ inputs.version }}"'"/' lib_version/__version__.py > tmp && mv tmp lib_version/__version__.py
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          git add lib_version/__version__.py
          git commit -m "chore: release ${{ inputs.version }}"
          git push origin HEAD --tags
      - uses: actions/create-release@v1
        with:
          tag_name: v${{ inputs.version }}
          release_name: v${{ inputs.version }}
      - run: |
          IFS='.' read MAJOR MINOR PATCH <<< "${{ inputs.version }}"
          NEXT="$MAJOR.$MINOR.$((PATCH+1))-pre1"
          git tag "$NEXT"
          sed -E 's/^__version__ = ".*"/__version__ = "'"$NEXT"'"/' lib_version/__version__.py > tmp && mv tmp lib_version/__version__.py
          git add lib_version/__version__.py
          git commit -m "chore: bump to $NEXT"
          git push origin HEAD --tags

  delivery:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - name: Read current version
        id: get_ver
        run: |
          VERSION=$(grep -oP '__version__ = "\K[^"]+' lib_version/__version__.py)
          echo "ver=$VERSION" >> $GITHUB_OUTPUT
      - run: |
          git fetch --tags
          LATEST=$(git tag --list '*-pre*' --sort=-v:refname | head -n1)
          if [ -z "$LATEST" ]; then
            BASE=$(git tag --list 'v*.*.*' --sort=-v:refname | head -n1 | sed 's/^v//')
            RC=1
          else
            BASE=${LATEST%-pre*}
            RC=${LATEST##*-pre}
            RC=$((RC+1))
          fi
          NEXT="$BASE-pre$RC"
          git tag "$NEXT"
          sed -E 's/^__version__ = ".*"/__version__ = "'"$NEXT"'"/' lib_version/__version__.py > tmp && mv tmp lib_version/__version__.py
          git add lib_version/__version__.py
          git commit -m "chore: bump to $NEXT [skip ci]"
          git push origin HEAD --tags
