name: Release

# Trigger workflow manually with version bump choice
on:
  workflow_dispatch:
    inputs:
      bump_level:
        description: 'Choose version bump: major, minor, or patch'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch

# Allow workflow to create and push tags
permissions:
  contents: write

env:
  GIT_USER_NAME: "github-actions[bot]"
  GIT_USER_EMAIL: "github-actions[bot]@users.noreply.github.com"

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      # Checkout repository with full history
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # Sets up Git identity for automated commits
      - name: Configure Git
        run: |
          git config user.name "${{ env.GIT_USER_NAME }}"
          git config user.email "${{ env.GIT_USER_EMAIL }}"
          git remote set-url origin git@github.com:${{ github.repository }}.git

      # Sets up SSH for pushing changes to the repository to bypass branch protection rules
      - name: Setup SSH for pushing
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY_PRIVATE }}

      # Ensure we have all tags for version determination
      - name: Fetch tags
        run: git fetch --tags

      # Calculate new stable version based on selected bump level
      - name: Determine new stable version
        id: bump
        run: |
          # Get latest non-prerelease tag or use 0.0.0 if none exists
          LATEST_TAG=$(git tag --list 'v*.*.*' --sort=-v:refname | grep -v -- '-pre' | head -n1)
          echo "Latest stable tag: $LATEST_TAG"
          
          if [ -z "$LATEST_TAG" ]; then
            echo "No existing tags found, starting with 0.0.0"
            BASE="0.0.0"
          else
            BASE=${LATEST_TAG#v}
          fi
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE"
          
          # Handle invalid or missing version components
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          
          # Bump version according to selected level
          case "${{ inputs.bump_level }}" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0;;
            minor) MINOR=$((MINOR+1)); PATCH=0;;
            patch) PATCH=$((PATCH+1));;
          esac
          
          NEW_STABLE="v$MAJOR.$MINOR.$PATCH"
          echo "New stable version: $NEW_STABLE"
          echo "stable=$NEW_STABLE" >> $GITHUB_OUTPUT
      
      # Update version file with new stable version
      - name: Update version.py to stable
        run: |
          sed -E 's/^version = ".*"/version = "'"${{ steps.bump.outputs.stable }}"'"/' \
            lib_version/__version__.py > tmp && mv tmp lib_version/__version__.py
      
      # Commit and tag stable version
      - name: Commit & push stable
        run: |
          git add lib_version/__version__.py
          git commit -m "Release ${{ steps.bump.outputs.stable }} [skip ci]"
          git tag "${{ steps.bump.outputs.stable }}"
          git push origin main --tags

      # Create GitHub release for the new version
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.bump.outputs.stable }}
          name: ${{ steps.bump.outputs.stable }}
          body: |
            ## Installation
                    
            ### From Git Tag
            ```bash
            pip install git+https://github.com/${{ github.repository }}.git@${{ steps.tag_version.outputs.new_tag }}
            ```
            
            ## Contents
            - Source code (.tar.gz and .zip)
          token: ${{ secrets.GITHUB_TOKEN }}

      # Calculate next pre-release version for development
      - name: Determine next prerelease
        id: pre
        run: |
          STABLE="${{ steps.bump.outputs.stable }}"
          BASE=${STABLE#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE"
          NEXT="v$MAJOR.$MINOR.$((PATCH+1))-pre-0"
          echo "next=$NEXT" >> $GITHUB_OUTPUT
      
      # Update version file with pre-release version
      - name: Update version.py to prerelease
        run: |
          sed -E 's/^version = ".*"/version = "'"${{ steps.pre.outputs.next }}"'"/' \
            lib_version/__version__.py > tmp && mv tmp lib_version/__version__.py

      # Commit and tag pre-release version
      - name: Commit & tag prerelease
        run: |
          git add lib_version/__version__.py
          git commit -m "Bump to prerelease ${{ steps.pre.outputs.next }} [skip ci]"
          git tag "${{ steps.pre.outputs.next }}"
          git push origin main --tags
